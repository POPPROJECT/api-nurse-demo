import {
  Controller,
  Get,
  Post,
  Delete,
  Param,
  Body,
  ParseIntPipe,
  UseGuards,
} from '@nestjs/common';
import { CreatePrefixDto } from '../dto/create-prefix.dto';
import { ExperienceBookPrefixService } from './experience-prefix.service';
import { JwtOrSessionGuard } from 'src/auth/guards/jwt-or-session.guard';

// ‚úÖ ‡πÉ‡∏ä‡πâ JwtAuthGuard ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô route ‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á login)
// @UseGuards(JwtAuthGuard)
  @UseGuards(JwtOrSessionGuard)
// ‚úÖ ‡∏•‡∏ö (\d+) ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô path-to-regexp
@Controller('experience-books/:bookId/prefixes')
export class ExperienceBookPrefixController {
  constructor(private readonly prefixService: ExperienceBookPrefixService) {}

  /** üìò ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ prefix ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô */
  @Get()
  getAll(@Param('bookId', ParseIntPipe) bookId: number) {
    return this.prefixService.findAll(bookId);
  }

  /** ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° prefix ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏∏‡∏î */
  @Post()
  create(
    @Param('bookId', ParseIntPipe) bookId: number,
    @Body() dto: CreatePrefixDto,
  ) {
    return this.prefixService.create(bookId, dto);
  }

  /** ‚ùå ‡∏•‡∏ö prefix ‡∏ï‡∏≤‡∏° id */
  @Delete(':prefixId')
  remove(
    @Param('bookId', ParseIntPipe) bookId: number,
    @Param('prefixId', ParseIntPipe) prefixId: number,
  ) {
    return this.prefixService.remove(bookId, prefixId);
  }
}
