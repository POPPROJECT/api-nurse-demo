import { Controller, Get, Param, Req, UseGuards } from '@nestjs/common';
import { ApproversService } from './approvers.service';
import { JwtOrSessionGuard } from '../guards/jwt-or-session.guard';

const MAX_PIN_FAIL = 5; // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å PIN ‡∏ú‡∏¥‡∏î‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á

@Controller('approvers')
export class ApproversController {
  constructor(private readonly approversService: ApproversService) {}

  /**
   * üîê GET /approvers/by-role/:role
   * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Approver ‡∏ï‡∏≤‡∏° Role ‡πÄ‡∏ä‡πà‡∏ô APPROVER_IN ‡∏´‡∏£‡∏∑‡∏≠ APPROVER_OUT
   */
  // @UseGuards(JwtAuthGuard)
  @UseGuards(JwtOrSessionGuard)
  @Get('by-role/:role')
  async getApproversByRole(@Param('role') role: string, @Req() req) {
    return this.approversService.getApproversByRole(role);
  }

  @UseGuards(JwtOrSessionGuard)
  @Get('me/pin-status')
  async pinStatus(@Req() req) {
    const prof = await this.approversService.getOwnProfile(req.user.id);
    return {
      pinFailCount: prof.pinFailCount,
      pinLockedUntil: prof.pinLockedUntil,
      maxFails: MAX_PIN_FAIL, // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à export ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ
    };
  }
}
