import { Injectable, NotFoundException } from '@nestjs/common';
import { Role } from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class ApproversService {
  constructor(private prisma: PrismaService) {}

  /**
   * ‡∏î‡∏∂‡∏á Approver ‡∏ï‡∏≤‡∏° Role (APPROVER_IN ‡∏´‡∏£‡∏∑‡∏≠ APPROVER_OUT)
   * ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠, email, ‡πÅ‡∏•‡∏∞ userId
   */
  async getApproversByRole(role: string) {
    const validRole = role.toUpperCase() as Role; // üîÅ ‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô enum ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const approvers = await this.prisma.approverProfile.findMany({
      where: {
        user: {
          role: validRole as Role,
        },
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
          },
        },
      },
    });

    // ‚úÖ Map ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    return approvers.map((a) => ({
      id: a.user.id,
      approverName: a.user.name,
    }));
  }

  // ‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á profile ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π pinFailCount/pinLockedUntil)
  async getOwnProfile(userId: number) {
    const prof = await this.prisma.approverProfile.findUnique({
      where: { userId },
    });
    if (!prof) throw new NotFoundException('Profile ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    return prof;
  }
}
